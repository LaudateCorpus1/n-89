/* automatically generated by rust-bindgen */

#![allow(non_camel_case_types)]

pub type __uint8_t = cty::c_uchar;
pub type __uint32_t = cty::c_uint;
pub type __time_t = cty::c_long;
pub type time_t = __time_t;
extern "C" {
	#[doc = "This should be the FIRST function to call (unless the 'params'"]
	#[doc = "structure has been properly initialized)."]
	pub fn ti68k_config_load_default() -> cty::c_int;
}
extern "C" {
	#[doc = "This should be the SECOND function to call."]
	#[doc = "Load a ROM image (images.c)."]
	pub fn ti68k_load_image(filename: *const cty::c_char) -> cty::c_int;
}
extern "C" {
	#[doc = "This is the THIRD function to call for completely initializing the"]
	#[doc = "emulation engine."]
	pub fn ti68k_init() -> cty::c_int;
}
extern "C" {
	#[doc = "This should be the FOURTH function to call."]
	#[doc = "It simply resets the hardware engine."]
	pub fn ti68k_reset() -> cty::c_int;
}
extern "C" {
	#[doc = "Close the library by exiting the emulation engine"]
	#[doc = "(free resources)."]
	pub fn ti68k_exit() -> cty::c_int;
}
extern "C" {
	#[doc = "Do 'n' instructions (up to 'maxcycles', unless set to 0)."]
	#[doc = ""]
	#[doc = "Returned value:"]
	#[doc = "- 1 if breakpoint has been encountered,"]
	#[doc = "- 2 if trace,"]
	#[doc = "- 0 otherwise."]
	pub fn hw_m68k_run(n: cty::c_int, maxcycles: cty::c_uint) -> cty::c_int;
}
extern "C" {
	pub fn ti68k_kbd_set_key(key: cty::c_int, active: cty::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TTIME {
	pub s: time_t,
	pub ms: cty::c_int,
}
#[doc = " If this structure is modified, the SAV_REVISION number (state.c)"]
#[doc = "has to be incremented."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Ti68kHardware {
	#[doc = " misc (non hardware pseudo-constants)"]
	pub calc_type: cty::c_int,
	#[doc = " RAM size"]
	pub ram_size: cty::c_int,
	#[doc = " ROM size"]
	pub rom_size: cty::c_int,
	#[doc = " HWx io size"]
	pub io_size: cty::c_int,
	#[doc = " HW2 io size"]
	pub io2_size: cty::c_int,
	#[doc = " HW3 io size"]
	pub io3_size: cty::c_int,
	#[doc = " ROM base address"]
	pub rom_base: u32,
	#[doc = " ROM type"]
	pub rom_flash: cty::c_int,
	#[doc = " ROM/AMS version"]
	pub rom_version: [cty::c_char; 5usize],
	#[doc = " HW1/2/3/4"]
	pub hw_type: cty::c_int,
	#[doc = " ROM v1.x(y)"]
	pub ti92v1: cty::c_int,
	#[doc = " ROM v2.x"]
	pub ti92v2: cty::c_int,
	#[doc = " LCD physical width"]
	pub lcd_w: cty::c_int,
	#[doc = " LCD physical height"]
	pub lcd_h: cty::c_int,
	pub on_key: cty::c_int,
	#[doc = " LCD address (as $4c00)"]
	pub lcd_adr: u32,
	#[doc = " direct pointer to LCD in PC RAM"]
	pub lcd_ptr: *mut cty::c_char,
	pub contrast: cty::c_int,
	#[doc = " LCD logical width"]
	pub log_w: cty::c_int,
	#[doc = " LCD logical height"]
	pub log_h: cty::c_int,
	pub on_off: cty::c_int,
	#[doc = " used by grayscales"]
	pub lcd_tick: cty::c_ulong,
	#[doc = " ROM"]
	pub rom: *mut u8,
	#[doc = " RAM"]
	pub ram: *mut u8,
	#[doc = " HW1/2/3 i/o ports"]
	pub io: *mut u8,
	#[doc = " HW2/3   i/o ports"]
	pub io2: *mut u8,
	#[doc = " HW3\t   i/o ports"]
	pub io3: *mut u8,
	#[doc = " unused"]
	pub unused: *mut u8,
	#[doc = " SSP at vector #0"]
	pub initial_ssp: u32,
	#[doc = " PC  at vector #1"]
	pub initial_pc: u32,
	#[doc = " Current timer value"]
	pub timer_value: u8,
	#[doc = " Value to reload"]
	pub timer_init: u8,
	#[doc = " RTC value"]
	pub rtc_value: u8,
	#[doc = " time reference"]
	pub rtc3_ref: TTIME,
	#[doc = " time value when"]
	pub rtc3_beg: TTIME,
	#[doc = " clock is load"]
	pub rtc3_load: TTIME,
	#[doc = " hw protection state"]
	pub protect: cty::c_int,
	#[doc = " archive memory limit"]
	pub archive_limit: u32,
	#[doc = " RAM page execution protection bitmask"]
	pub ram_exec: [cty::c_int; 64usize],
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TiKey {
	TIKEY_DOWN = 0,
	TIKEY_RIGHT = 1,
	TIKEY_UP = 2,
	TIKEY_LEFT = 3,
	TIKEY_HAND = 4,
	TIKEY_SHIFT = 5,
	TIKEY_DIAMOND = 6,
	TIKEY_2ND = 7,
	TIKEY_3 = 8,
	TIKEY_2 = 9,
	TIKEY_1 = 10,
	TIKEY_F8 = 11,
	TIKEY_W = 12,
	TIKEY_S = 13,
	TIKEY_Z = 14,
	TIKEY_6 = 15,
	TIKEY_5 = 16,
	TIKEY_4 = 17,
	TIKEY_F3 = 18,
	TIKEY_E = 19,
	TIKEY_D = 20,
	TIKEY_X = 21,
	TIKEY_9 = 22,
	TIKEY_8 = 23,
	TIKEY_7 = 24,
	TIKEY_F7 = 25,
	TIKEY_R = 26,
	TIKEY_F = 27,
	TIKEY_C = 28,
	TIKEY_STORE = 29,
	TIKEY_COMMA = 30,
	TIKEY_PARIGHT = 31,
	TIKEY_PALEFT = 32,
	TIKEY_F2 = 33,
	TIKEY_T = 34,
	TIKEY_G = 35,
	TIKEY_V = 36,
	TIKEY_SPACE = 37,
	TIKEY_TAN = 38,
	TIKEY_COS = 39,
	TIKEY_SIN = 40,
	TIKEY_F6 = 41,
	TIKEY_Y = 42,
	TIKEY_H = 43,
	TIKEY_B = 44,
	TIKEY_DIVIDE = 45,
	TIKEY_P = 46,
	TIKEY_ENTER2 = 47,
	TIKEY_LN = 48,
	TIKEY_F1 = 49,
	TIKEY_U = 50,
	TIKEY_J = 51,
	TIKEY_N = 52,
	TIKEY_POWER = 53,
	TIKEY_MULTIPLY = 54,
	TIKEY_APPS = 55,
	TIKEY_CLEAR = 56,
	TIKEY_F5 = 57,
	TIKEY_I = 58,
	TIKEY_K = 59,
	TIKEY_M = 60,
	TIKEY_EQUALS = 61,
	TIKEY_NU = 62,
	TIKEY_ESCAPE = 63,
	TIKEY_MODE = 64,
	TIKEY_PLUS = 65,
	TIKEY_O = 66,
	TIKEY_L = 67,
	TIKEY_THETA = 68,
	TIKEY_BACKSPACE = 69,
	TIKEY_NEGATE = 70,
	TIKEY_PERIOD = 71,
	TIKEY_0 = 72,
	TIKEY_F4 = 73,
	TIKEY_Q = 74,
	TIKEY_A = 75,
	TIKEY_ENTER1 = 76,
	TIKEY_MINUS = 77,
	TIKEY_ON = 78,
	TIKEY_ALPHA = 79,
	TIKEY_EE = 80,
	TIKEY_CATALOG = 81,
	TIKEY_HOME = 82,
	TIKEY_PIPE = 83,
	TIKEY_VOID = 84,
	MAX_TIKEYS = 85,
}
extern "C" {
	pub static mut tihw: Ti68kHardware;
}
